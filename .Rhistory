smaller$corr <- round(smaller$corr,2)
smaller<- results_noNA[,2:5]
smaller$corr <- round(smaller$corr,2)
View(smaller)
smaller$corr <- round(smaller$corr,1)
smaller<- results_noNA[,2:5]
View(smaller)
smaller$corr <- round(smaller$corr,1)
View(smaller)
20^3
seq(-.9,.9,.1)
19*19*19
list(NA,length=50)
a <- list(NA,length=50)
?paste
library(phantSEM)
library(lavaan)
require(MBESS)
a <- matrix(c(1,.224,-.267,.224,1,-.219,-.267,-.219,1),3)
a
cor2cov(a,c(.76,.79,10.25))
covmatrix <- matrix(c(
0.5776,    0.1344896, -2.07993,
0.1344896, 0.6241,    -1.773353,
-2.07993, -1.773353,  105.0625), nrow = 3, byrow = TRUE)
colnames(covmatrix) <- c("X", "M2", "Y2")
# lavaan syntax for observed model
observed <- " M2 ~ X
Y2 ~ M2 + X "
# lavaan output
obs_output <- lavaan::sem(model = observed, sample.cov = covmatrix, sample.nobs = 2293)
# lavaan syntax for phantom variable model
phantom <-
"M2 ~ M1 + Y1 + a*X
Y2 ~ M1 + Y1 + b*M2 + cp*X "
Step1 <- SA_step1(
lavoutput = obs_output,
mod_obs = observed,
mod_phant = phantom
)
phantom_assignment <- list ("CovM1M2"= seq(.2, .6, .1),
"CovM1X"= seq(.2, .6, .1),
"CovM1Y2"= "CovY1M2",
"CovY1M1"= "CovY2M2",
"CovY1M2"= seq(.2, .6, .1),
"CovY1X"= seq(.2, .6, .1),
"CovY1Y2"= "CovM1M2",
"VarM1"= 1,
"VarY1"= 1)
Step2 <- SA_step2(
phantom_assignment = phantom_assignment,
step1 = Step1)
Step3 <- SA_step3(
step2 = Step2,
n = 2293)
View(Step3)
Step3[[3]][[1]]
b_results <- ghost_par_ests(
step3 = Step3,
parameter_label = "b",
remove_NA = TRUE)
View(b_results)
?ghost_par_ests
b_results <- ghost_par_ests(
step3 = Step3,
parameter_label = "a",
remove_NA = TRUE)
View(b_results)
ghost_par_ests
resultlist <- step3[[1]]
step3=Step3
resultlist <- step3[[1]]
combos <- step3[[4]]
parmatrix <- matrix(NA, nrow = 0, ncol = 10)
comboindex <- matrix(NA, nrow = 0, ncol = 1)
colnames(parmatrix) <- c("lhs", "op", "rhs", "label", "est",
"se", "z", "pvalue", "ci.lower", "ci.upper")
for (i in 1:nrow(combos)) {
reptemp <- i
if (length(resultlist[[i]]) > 1) {
pars <- resultlist[[i]]
partemp <- pars[which(pars$label == parameter_label),
]
}
for (i in 1:nrow(combos)) {
reptemp <- i
if (length(resultlist[[i]]) > 1) {
pars <- resultlist[[i]]
partemp <- pars[which(pars$label == parameter_label),
]
}
else {
partemp <- rep(NA, 10)
}
parmatrix <- rbind(parmatrix, partemp)
comboindex <- rbind(comboindex, reptemp)
}
parameter_label = "b"
for (i in 1:nrow(combos)) {
reptemp <- i
if (length(resultlist[[i]]) > 1) {
pars <- resultlist[[i]]
partemp <- pars[which(pars$label == parameter_label),
]
}
else {
partemp <- rep(NA, 10)
}
parmatrix <- rbind(parmatrix, partemp)
comboindex <- rbind(comboindex, reptemp)
}
View(comboindex)
parmatrix <- rbind(parmatrix, partemp)
b_ests <- cbind(Step2[["combos"]], b_results)
View(Step3)
b_results <- ghost_par_ests(
step3 = Step3,
parameter_label = "b",
remove_NA = TRUE)
b_results <- ghost_par_ests(
step3 = Step3,
parameter_label = "b",
remove_NA = FALSE)
b_ests <- cbind(Step2[["combos"]], b_results)
View(b_ests)
library(tidyr)
library(tidyverse)
install.packages("tidyverse")
ggplot(b_ests, aes(x = `CovM1M2,CovY1Y2`, y = est)) +
geom_point(size = 2) +
scale_shape_manual() + # scale_fill_manual(values = c("black", "lightgray")) +
scale_color_manual(values = c("grey", "black")) +
facet_grid(~ b_ests$`CovY1M2,CovM1Y2`) +
theme_bw() +
scale_fill_grey() +
theme(
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 20),
axis.text = element_text(size = 15),
strip.text.y = element_text(size = 15),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.position = "bottom",
panel.spacing.x = unit(2, "mm")
)
library(ggplot2)
ggplot(b_ests, aes(x = `CovM1M2,CovY1Y2`, y = est)) +
geom_point(size = 2) +
scale_shape_manual() + # scale_fill_manual(values = c("black", "lightgray")) +
scale_color_manual(values = c("grey", "black")) +
facet_grid(~ b_ests$`CovY1M2,CovM1Y2`) +
theme_bw() +
scale_fill_grey() +
theme(
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 20),
axis.text = element_text(size = 15),
strip.text.y = element_text(size = 15),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.position = "bottom",
panel.spacing.x = unit(2, "mm")
)
ggplot(b_ests, aes(x = `CovM1M2,CovY1Y2`, y = est)) +
geom_point(size = 2) +
scale_shape_manual() + # scale_fill_manual(values = c("black", "lightgray")) +
scale_color_manual(values = c("grey", "black")) +
facet_grid(~ b_ests$`CovY1M2,CovM1Y2`) +
theme_bw()
phantom_assignment <- list ("CovM1M2"= seq(.2, .6, .1),
"CovM1X"= seq(.2, .6, .1),
"CovM1Y2"= "CovY1M2",
"CovY1M1"= "CovY2M2",
"CovY1M2"= seq(.2, .6, .1),
"CovY1X"= seq(.2, .6, .1),
"CovY1Y2"= "CovM1M2",
"VarM1"= 1,
"VarY1"= 1)
Step2 <- SA_step2(
phantom_assignment = phantom_assignment,
step1 = Step1)
phantom_assignment <- list ("CovM1M2"= seq(.2, .6, .1),
"CovM1X"= seq(.2, .6, .1),
"CovM1Y2"= "CovY1M2",
"CovY1M1"= "CovY2M2",
"CovY1M2"= seq(-.2, -.6, .1),
"CovY1X"= seq(-.2, -.6, .1),
"CovY1Y2"= "CovM1M2",
"VarM1"= 1,
"VarY1"= 1)
seq(-.2, -.6, -.1)
phantom_assignment <- list ("CovM1M2"= seq(.2, .6, .1),
"CovM1X"= seq(.2, .6, .1),
"CovM1Y2"= "CovY1M2",
"CovY1M1"= "CovY2M2",
"CovY1M2"= seq(-.2, -.6, -.1),
"CovY1X"= seq(-.2, -.6, -.1),
"CovY1Y2"= "CovM1M2",
"VarM1"= 1,
"VarY1"= 1)
Step2 <- SA_step2(
phantom_assignment = phantom_assignment,
step1 = Step1)
Step3 <- SA_step3(
step2 = Step2,
n = 2293)
b_results <- ghost_par_ests(
step3 = Step3,
parameter_label = "b",
remove_NA = FALSE)
b_ests <- cbind(Step2[["combos"]], b_results)
ggplot(b_ests, aes(x = `CovM1M2,CovY1Y2`, y = est)) +
geom_point(size = 2) +
scale_shape_manual() + # scale_fill_manual(values = c("black", "lightgray")) +
scale_color_manual(values = c("grey", "black")) +
facet_grid(~ b_ests$`CovY1M2,CovM1Y2`) +
theme_bw() +
scale_fill_grey() +
theme(
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 20),
axis.text = element_text(size = 15),
strip.text.y = element_text(size = 15),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.position = "bottom",
panel.spacing.x = unit(2, "mm")
)
SEMI     BY
.544^2
1-.2959
setwd("G:/My Drive/FPG/teacher survey/MplusAuto-20240304T170917Z-001/MplusAuto")
readModels(target=getwd(),recursive=FAlSE, what="savedata"
)
library(MplusAutomation)
readModels(target=getwd(),recursive=FAlSE, what="savedata"
)
readModels(target=getwd(),recursive=FALSE, what="savedata"
)
readModels(target=getwd(),recursive=FALSE, what="savedata_info"
)
readModels(target=getwd(),recursive=FALSE, what="tech9"
)
readModels(target=getwd(),recursive=FALSE, what="ALL"
)
readModels(target=getwd(),recursive=FALSE
)
extractModelParameters(target=getwd(),)
readModels(target="./dfi_test_ii.dat",recursive=FALSE
)
getSavedata_Fileinfo("./dfi_test_ii.dat")
getSavedata_Fileinfo("./basc.hyperactivity...mcneish.dfi.example..exact.fit.part.ii..out")
list.files()
getSavedata_Fileinfo("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
get_tech9("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
, what="SAVEDATA")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out",recursive=FALSE
, what="SAVEDATA")
get_SAVEDATA("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
get_savedata("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
get_results("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
get_summaries("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out",recursive=FALSE
, what="ALL")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out",recursive=FALSE
, what="ALL")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out", what="parameters")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out", what="parameters")
library(phantSEM)
library(lavaan)
#Estimating the sequential mediation model
require(MBESS)
#Impute the correlation matrix
a <- matrix(c(1,.369, .505, -.359, .369, 1, .356, -.270, .505, .356, 1, -.371, -.359, -.270, -.371, 1),4)
a
#Convert the correlation matrix to the covariance matrix
covmatrix <- cor2cov(a,c(23.674, 4.509, 3.052, 10.499))
# Assign specified column names to the covariance matrix
colnames(covmatrix) <- c("X", "M12", "M22", "Y2")
# lavaan syntax for observed model
observed <-
"M12 ~ a1*X
M22 ~ a2*X + d*M12
Y2 ~ cp*X + b1*M12 + b2*M22
# indirect effect (through M1)
ab1 := a1*b1
# indirect effect (through M2)
ab2 := a2*b2
# indirect effect (through M1 and M2)
ab12 := a1*d*b2
# total indirect effect
totalindirect := (a1*b1) + (a2*b2) + (a1*d*b2)
# total effect
total := cp + (a1*b1) + (a2*b2) + (a1*d*b2)"
# lavaan output
obs_output <- lavaan::sem(model = observed, sample.cov = covmatrix, sample.nobs = 2661)
summary(obs_output)
# lavaan syntax for phantom variable model
phantom <-
"
M12 ~ a1*X + M11 + M21 + Y1
M22 ~  a2*X + d*M12 + M11 + M21 + Y1
Y2 ~  cp*X + b1*M12 + b2*M22 + M11 + M21 + Y1"
Step1 <- SA_step1(
lavoutput = obs_output,
mod_obs = observed,
mod_phant = phantom
)
phantom_assignment <- list ("CovM11M12"= seq(.2, .6, .1), #Autoregressive effect
"CovM11M22"= seq(.1, .4, .1), #Crosslagged effect
"CovM11X"= .369, # X is not randomized
"CovM11Y2"= seq(-.1,-.4,-.1),#Crosslagged effect with y
"CovM21M11"= .356,
"CovM21M12"= "CovM11M22", #Crosslagged effect
"CovM21M22"= "CovM11M12", #Autoregressive effect
"CovM21X"= .505, # X is not randomized
"CovM21Y2"= "CovM11Y2", #Crosslagged effect with y
"CovY1M11"= -.270,
"CovY1M12"= "CovM11Y2", #Crosslagged effect WITH Y
"CovY1M21"= -.371,
"CovY1M22"= "CovM11Y2",  #Crosslagged effect with y
"CovY1X"= -.359, # X is not randomized
"CovY1Y2"= "CovM11M12", #Autoregressive effect
"VarM11"= 1,
"VarM21"= 1,
"VarY1"= 1)
Step2 <- SA_step2(
phantom_assignment = phantom_assignment,
step1 = Step1)
Step3 <- SA_step3(
step2 = Step2,
n = 2661)
b_results <- ghost_par_ests(
step3 = Step3,
parameter_label = "b1",
remove_NA = FALSE) # has to be false to be able to bind with combos below
b_ests <- cbind(Step2[["combos"]], b_results)
library(ggplot2)
ggplot(b_ests, aes(x = `CovM11M12,CovM21M22,CovY1Y2`, y = est)) +
geom_point(size = 2) +
scale_shape_manual() + # scale_fill_manual(values = c("black", "lightgray")) +
scale_color_manual(values = c("grey", "black")) +
facet_grid(~ b_ests$`CovM11M22,CovM11Y2,CovM21M12,CovM21Y2,CovY1M12,CovY1M22`) +
theme_bw() +
scale_fill_grey() +
theme(
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 20),
axis.text = element_text(size = 15),
strip.text.y = element_text(size = 15),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.position = "bottom",
panel.spacing.x = unit(2, "mm")
)
b_ests$AR_paths <- b_ests$`CovM11M12,CovM21M22,CovY1Y2`
b_ests$Crosslags_y <- b_ests$`CovM11Y2,CovM21Y2,CovY1M12,CovY1M22`
b_ests$Crosslags_m <- b_ests$`CovM11M22,CovM21M12`
ggplot(b_ests, aes(x = AR_paths, y = est)) +
geom_point(size = 2) +
scale_shape_manual() + # scale_fill_manual(values = c("black", "lightgray")) +
scale_color_manual(values = c("grey", "black")) +
facet_grid(Crosslags_m~ Crosslags_y, labeller=label_both) +
theme_bw() +
scale_fill_grey() +
theme(
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 20),
axis.text = element_text(size = 15),
strip.text.y = element_text(size = 15),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 18),
legend.position = "bottom",
panel.spacing.x = unit(2, "mm")
)
get_summaries("./basc hyperactivity - mcneish dfi example (exact fit part ii).out")
readModels(target="./basc hyperactivity - mcneish dfi example (exact fit part ii).out", what="parameters")
library(tidyverse)
readLines("/.dfi_test_ii.dat")
setwd("G:/My Drive/FPG/teacher survey/MplusAuto-20240304T170917Z-001/MplusAuto")
readLines("/dfi_test_ii.dat")
readLines("./dfi_test_ii.dat")
dfidat <- readLines("./dfi_test_ii.dat")
lines <- readLines("./dfi_test_ii.dat")
num_columns <- 12 + 31*2 # Adjust if necessary based on your file's structure
column_names <- c("ReplicationNumber", paste0("ParameterEstimate", 1:31),
paste0("StandardError", 1:31), "NumFreeParameters", "ChiSquareValue",
"ChiSquareDegreesOfFreedom", "ChiSquarePValue", "CFI", "TLI",
"RMSEAEstimate", "SRMR", "ConditionNumber")
data <- matrix(nrow = 2000, ncol = num_columns)
colnames(data) <- column_names
View(data)
head(lines)
lines <- readLines("./dfi_test_ii.dat")
head(lines)
read_mplus_results <- function(file_path) {
# Read the entire file into memory
lines <- readLines(file_path)
# Initialize lists (vectors in R) to store the data
data_list <- list()
current_replication <- NULL
# Helper function to add current replication data to list
add_to_list <- function(rep_data) {
if (!is.null(rep_data)) {
data_list[[length(data_list) + 1]] <<- rep_data
}
}
for (line in lines) {
# Check if the line indicates a new replication
if (grepl("^\\d+$", line)) { # Replication number is on its own line
# Add current replication data to the list before starting a new one
add_to_list(current_replication)
current_replication <- list(ReplicationNumber = as.numeric(line))
} else if (!is.null(current_replication)) {
# Concatenate line data to the current replication, handling different data types
line_data <- as.numeric(unlist(strsplit(line, " ")))
if (is.null(current_replication$Data)) {
current_replication$Data <- line_data
} else {
current_replication$Data <- c(current_replication$Data, line_data)
}
}
}
# Add the last replication data to the list
add_to_list(current_replication)
# Convert the list of replications to a data frame
df <- do.call(rbind, lapply(data_list, function(rep) {
c(ReplicationNumber = rep$ReplicationNumber, rep$Data)
}))
# Define column names
column_names <- c("ReplicationNumber", paste0("ParameterEstimate", 1:31),
paste0("StandardError", 1:31), "NumFreeParameters",
"ChiSquareValue", "ChiSquareDegreesOfFreedom", "ChiSquarePValue",
"CFI", "TLI", "RMSEAEstimate", "SRMR", "ConditionNumber")
colnames(df) <- column_names
return(df)
}
# Example usage:
file_path <- "./dfi_test_ii.dat"
df <- read_mplus_results(file_path)
Optionally, save to a CSV or RDS file
View(df)
read_mplus_results <- function(file_path,npar) {
# Read the entire file into memory
lines <- readLines(file_path)
# Initialize lists (vectors in R) to store the data
data_list <- list()
current_replication <- NULL
# Helper function to add current replication data to list
add_to_list <- function(rep_data) {
if (!is.null(rep_data)) {
data_list[[length(data_list) + 1]] <<- rep_data
}
}
for (line in lines) {
# Check if the line indicates a new replication
if (grepl("^\\d+$", line)) { # Replication number is on its own line
# Add current replication data to the list before starting a new one
add_to_list(current_replication)
current_replication <- list(ReplicationNumber = as.numeric(line))
} else if (!is.null(current_replication)) {
# Concatenate line data to the current replication, handling different data types
line_data <- as.numeric(unlist(strsplit(line, " ")))
if (is.null(current_replication$Data)) {
current_replication$Data <- line_data
} else {
current_replication$Data <- c(current_replication$Data, line_data)
}
}
}
# Add the last replication data to the list
add_to_list(current_replication)
# Convert the list of replications to a data frame
df <- do.call(rbind, lapply(data_list, function(rep) {
c(ReplicationNumber = rep$ReplicationNumber, rep$Data)
}))
# Define column names
column_names <- c("ReplicationNumber", paste0("ParameterEstimate", 1:npar),
paste0("StandardError", 1:npar), "NumFreeParameters",
"ChiSquareValue", "ChiSquareDegreesOfFreedom", "ChiSquarePValue",
"CFI", "TLI", "RMSEAEstimate", "SRMR", "ConditionNumber")
colnames(df) <- column_names
return(df)
}
# Example usage:
file_path <- "./dfi_test_ii.dat"
df <- read_mplus_results(file_path,31)
View(df)
dfi_fitindices <- df[,c(1,64:72)]
View(dfi_fitindices)
dfi_fitindices <- as.data.frame(df[,c(1,64:72)])
hist(dfi_fitindices$RMSEAEstimate)
quantile(dfi_fitindices$RMSEAEstimate,c(2.5,97.5))
quantile(dfi_fitindices$RMSEAEstimate,c(2.5))
quantile(dfi_fitindices$RMSEAEstimate,c(.025,.975))
file_path <- "./dfi_test.dat"
sm_missp <- read_mplus_results(file_path,31)
dfi_sm_missp <- as.data.frame(sm_missp[,c(1,64:72)])
c(dfi_nomissp,"data"="no misspecification")
file_path <- "./dfi_test_ii.dat"
no_missp <- read_mplus_results(file_path,31)
